# 실패율 프로그래머스 LV.1

### **문제 설명**

# **실패율**

슈퍼 게임 개발자 오렐리는 큰 고민에 빠졌다. 그녀가 만든 프랜즈 오천성이 대성공을 거뒀지만, 요즘 신규 사용자의 수가 급감한 것이다. 원인은 신규 사용자와 기존 사용자 사이에 스테이지 차이가 너무 큰 것이 문제였다.

이 문제를 어떻게 할까 고민 한 그녀는 동적으로 게임 시간을 늘려서 난이도를 조절하기로 했다. 역시 슈퍼 개발자라 대부분의 로직은 쉽게 구현했지만, 실패율을 구하는 부분에서 위기에 빠지고 말았다. 오렐리를 위해 실패율을 구하는 코드를 완성하라.

- 실패율은 다음과 같이 정의한다.
    - 스테이지에 도달했으나 아직 클리어하지 못한 플레이어의 수 / 스테이지에 도달한 플레이어 수

전체 스테이지의 개수 N, 게임을 이용하는 사용자가 현재 멈춰있는 스테이지의 번호가 담긴 배열 stages가 매개변수로 주어질 때, 실패율이 높은 스테이지부터 내림차순으로 스테이지의 번호가 담겨있는 배열을 return 하도록 solution 함수를 완성하라.

### 제한사항

- 스테이지의 개수 N은 `1` 이상 `500` 이하의 자연수이다.
- stages의 길이는 `1` 이상 `200,000` 이하이다.
- stages에는 `1` 이상 `N + 1` 이하의 자연수가 담겨있다.
    - 각 자연수는 사용자가 현재 도전 중인 스테이지의 번호를 나타낸다.
    - 단, `N + 1` 은 마지막 스테이지(N 번째 스테이지) 까지 클리어 한 사용자를 나타낸다.
- 만약 실패율이 같은 스테이지가 있다면 작은 번호의 스테이지가 먼저 오도록 하면 된다.
- 스테이지에 도달한 유저가 없는 경우 해당 스테이지의 실패율은 `0` 으로 정의한다.

### 입출력 예

| N | stages | result |
| --- | --- | --- |
| 5 | [2, 1, 2, 6, 2, 4, 3, 3] | [3,4,2,1,5] |
| 4 | [4,4,4,4,4] | [4,1,2,3] |

### 입출력 예 설명

입출력 예 #11번 스테이지에는 총 8명의 사용자가 도전했으며, 이 중 1명의 사용자가 아직 클리어하지 못했다. 따라서 1번 스테이지의 실패율은 다음과 같다.

- 1 번 스테이지 실패율 : 1/8

2번 스테이지에는 총 7명의 사용자가 도전했으며, 이 중 3명의 사용자가 아직 클리어하지 못했다. 따라서 2번 스테이지의 실패율은 다음과 같다.

- 2 번 스테이지 실패율 : 3/7

마찬가지로 나머지 스테이지의 실패율은 다음과 같다.

- 3 번 스테이지 실패율 : 2/4
- 4번 스테이지 실패율 : 1/2
- 5번 스테이지 실패율 : 0/1

각 스테이지의 번호를 실패율의 내림차순으로 정렬하면 다음과 같다.

- [3,4,2,1,5]

입출력 예 #2

모든 사용자가 마지막 스테이지에 있으므로 4번 스테이지의 실패율은 1이며 나머지 스테이지의 실패율은 0이다.

- [4,1,2,3]

---

문제 ㅗㅜㅑ,,,

```python
def solution(N,stages):
		fail_dict={} #일단 딕셔너리 변수를 생성하였다
		for i in range(1,N+1):
				challengers=len([x for x in stages if x>=i])#stages중 for구문으로 1부터
#i가 큰 사람을 찾아 x를 리턴하는데 리스트에 담아 그 길이를 challengers에 담아 수를 세었다
				failures=stages.count(i) #이거는 i랑 같은 숫자(분자)를 찾아 넣었다 그 숫자를 count로
				fail_rate=failures/challengers if challengers > 0 else 0
				'''
				이거는 뭐냐 실패율을 구하는건데 challlengers분모가 0보다 커야 일단 하므로 if문으로 해주고
				0이면 0이라고 정의해주었다(안하니까 무슨 에러나던데...?그래서 했다'''
				fail_dict[i]=fail_rate #i를 Key로 갖는 딕셔너리에 실패율을 넣어주었땅...
				fail_dict = dict(sorted(fail_dict.items(), key=lambda x: x[1], reverse=True))
				answer = list(fail_dict.keys()) #그리고 나서 key만 뽑아 리스트로 정렬한거를 answer에 넣음
				return answer
```

먼저 실패율을 저장하기 위해 fail_dict라는 딕셔너리 변수를 생성하였다.

여기서 문제설명을 보면 예를들어 1번 스테이지라고 가정햇을 경우,

1이랑 같거나 큰게 분모(즉 1번을 시도한 사람들)이 되고

1이랑 같으면 분자(아직 스테이지를 진행중이므로) 실패를 햇다고 볼 수 있다

하나씩 살펴보기 전 sorted에 대해서 정리하자면

- iterable 객체: **`sorted(iterable)`**과 같이 iterable 객체(리스트, 튜플, 문자열, 세트 등)를 전달합니다. **`sorted`** 함수는 이 객체를 정렬한 결과를 반환합니다.
- key 인자: **`sorted(iterable, key=func)`**과 같이 key 인자를 지정하면, 정렬 기준을 설정할 수 있습니다. key 인자는 함수를 전달하며, 이 함수는 iterable 객체의 각 요소를 인자로 받아 정렬 기준을 계산한 결과를 반환합니다.
- reverse 인자: **`sorted(iterable, reverse=True)`**와 같이 reverse 인자를 **`True`**로 설정하면, 내림차순으로 정렬합니다. 기본값은 **`False`**이며, 오름차순으로 정렬합니다.
- 기타 인자: **`sorted`** 함수에는 다양한 인자들이 있으며, 필요한 경우에 해당 인자를 지정할 수 있습니다. 이 중에서 자주 사용되는 인자로는 **`cmp`**와 **`key`**가 있습니다. 하지만 이들은 파이썬 3.x부터는 지원되지 않으므로, 최신 버전의 파이썬에서는 사용하지 않는 것이 좋습니다.
- 

```python
		fail_dict = dict(sorted(fail_dict.items(), key=lambda x: x[1], reverse=True))				
```

이거는 x[1]즉 value가 되겠다 즉 fail_dict의 key와 value를 뽑는데 value기준으로 내림차순 정렬을 해서 딕셔너리로 다시 저장하겠다는 뜻!

그 다음 answer에 Ke값만 뽑아 리스트로 만들고 리턴!

딕셔너리를 활용해야하는 문제인데 기억해두장